{"version":3,"sources":["resources/bear.png","app-theme.ts","layouts/half.styles.ts","layouts/half.tsx","comnponents/no-camera.tsx","comnponents/camera.tsx","comnponents/main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","theme","colorPrimary","colorGreen","colorBlue","colorCyan","colorRed","colorYellow","logsGray","logsBlack","palette","createUseStyles","require","mainLayout","height","position","display","flexDirection","alignItems","justifyContent","fontSize","color","minWidth","maxWidth","backgroundColor","padding","overflowY","marginTop","width","flexGrow","HalfColsLayout","leftColumn","rightColumn","styles","useStyles","Navbar","Brand","src","bear","className","alt","Collapse","id","Text","HalfColsLayoutThemeWrapper","props","NoCamera","Camera","webcamRef","React","useRef","useCallback","current","imageSrc","getScreenshot","console","log","videoConstraints","facingMode","Main","useState","camOn","setCam","setRadioValue","e","ButtonGroup","toggle","ToggleButton","key","type","variant","name","value","checked","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.30d1cb3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bear.bed92471.png\";","const theme = {\n  colorPrimary: '#011f43',\n\n  colorGreen: \"#5CB85C\",\n  colorBlue: \"#1C7CD5\",\n  colorCyan: \"#56C0E0\",\n  colorRed: \"#D9534F\",\n  colorYellow: \"#FFC108\",\n  logsGray: \"#2B2B2B\",\n  logsBlack: \"#191919\",\n\n  palette: [\n    //Grayscale\n    \"white\",\n    \"#DDDDDD\",\n    \"#777777\",\n    \"#55595C\",\n    \"#373A3C\",\n  ]\n}\n\nexport type ITheme = typeof theme;\n\nexport default theme;","import { ITheme } from \"../app-theme\";\n\nconst { createUseStyles } = require('react-jss');\n\nexport default createUseStyles((theme: ITheme) => {\n  return {\n    mainLayout: {\n      //   minWidth: \"1280px\",\n      //   maxWidth: \"1600px\",\n      height: \"100vh\",\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"row\",\n\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      fontSize: \"12pt\",\n      color: \"white\",\n\n      \"& > .left-background\": {\n        minWidth: \"327px\",\n        maxWidth: \"327px\",\n        height: \"100%\",\n        position: \"relative\",\n        backgroundColor: theme.palette[1],\n      },\n\n      \"& > .left-background .left-column\": {\n        //minWidth: \"327px\",\n        //maxWidth: \"327px\",\n        //display: \"block\",\n        //height: \"100%\",\n        height: \"calc(100% - 130px)\",\n        position: \"relative\",\n        //flexGrow: 0,\n        color: theme.palette[4],\n        //backgroundColor: theme.palette[1],\n        padding: \"0px 13px 0px 13px\",\n        overflowY: \"scroll\",\n        marginTop: \"60px\"\n\n      },\n\n      \"& > .left-background .left-column .cards-area\": {\n        width: \"100%\",\n        height: \"100%\"\n        //overflowY: \"scroll\"\n      },\n\n      \"& > .center-column\": {\n        //width: \"calc(100% - 1152px)\",\n        //minWidth: \"1280px\",\n        //maxWidth: \"1600px\",\n        width: \"100%\",\n        height: \"100%\",\n        flexGrow: 1,\n        color: theme.palette[4],\n        backgroundColor: theme.palette[0],\n        padding: \"100px 100px 50px 50px\",\n        overflowY: \"scroll\"\n      },\n\n      \"& > .right-column\": {\n        width: \"384px\",\n        position: \"relative\",\n        color: theme.palette[1],\n        height: \"100%\",\n        backgroundColor: theme.palette[4],\n        overflowY: \"scroll\"\n      },\n    }\n  }\n})","import React from 'react';\n\nimport { ThemeProvider } from 'react-jss';\nimport theme from '../app-theme';\n\nimport useStyles from './half.styles';\nimport Navbar from 'react-bootstrap/Navbar';\n\n// import {NavDropdown, Nav} from \"react-bootstrap/\";\nimport bear from \"../resources/bear.png\"\n\nimport \"../App.css\"\n\nexport interface Props {\n  leftColumn: React.ReactElement;  \n  rightColumn: React.ReactElement;\n}\n\nconst HalfColsLayoutThemeWrapper: React.FC<Props> = props =>\n  <ThemeProvider theme={ theme }>\n    <HalfColsLayout { ...props } />\n    </ThemeProvider>\n\nconst HalfColsLayout: React.FC<Props> = ({ leftColumn, rightColumn }) => {\n  const styles = useStyles();\n\n  return (\n    <div>\n      {/* <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\" style = {{ height: '84px' }}> */}\n      <Navbar>\n        <Navbar.Brand>\n          <img          \n            src={bear}\n            height = \"70\"\n            className= \"d-inline-block align-top App-logo\"            \n            alt = \"kumar-logo\"\n          />\n        </Navbar.Brand>        \n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Navbar.Text>\n          ようこそ！熊AR\n          </Navbar.Text>                    \n        </Navbar.Collapse>\n      </Navbar>\n      <div className = { styles.mainLayout } >\n        <div className= \"left-background\" >\n          <div className=\"left-column\" >\n            <div className=\"cards-area\" >\n            { leftColumn }\n            </div>\n          </div>\n      </div>\n      <div className = \"center-column\" >\n        { rightColumn }\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HalfColsLayoutThemeWrapper;","import React from \"react\"\n\nfunction NoCamera() {\n  return <div>\n    <img\n      src={\"https://cdn.pixabay.com/photo/2017/02/12/21/29/false-2061132_960_720.png\"}      \n      className=\"d-inline-block align-top\"\n      height={50}\n      alt=\"camera-logo\"\n    />\n    <span>カメラ信号を受信できませんでした</span>\n  </div>\n}\n\nexport default NoCamera","import React from \"react\";\nimport Webcam from \"react-webcam\";\n// import * as posenet from '@tensorflow-models/posenet';\n\n\n\nfunction Camera() {\n\n  const webcamRef = React.useRef<any>(null);\n\n  const capture = React.useCallback(\n    () => {\n      if (webcamRef === null || webcamRef.current === null ) { return; }\n      const imageSrc = webcamRef.current.getScreenshot();      \n      console.log(\"ImageSrc\",imageSrc)    \n    },\n    [webcamRef]\n  );\n\n  // const loadModel = async () => {\n  //   // const net = await posenet.load();\n\n  //   const imageScaleFactor = 0.50;\n  //   const flipHorizontal = false;\n  //   const outputStride = 16;\n  //   // const imageElement = document.getElementById('cat');\n  //   const imageElement = webcamRef;\n  //   // load the posenet model\n  //   const net = await posenet.load();\n  //   const pose = await net.estimateSinglePose(imageElement);\n  // }\n  const videoConstraints = {\n    width: 800,\n    height: 600,\n    facingMode: \"user\"\n  };\n  \n  return <div>\n    <Webcam videoConstraints={videoConstraints}/>    \n    <p>あなたじゃん!</p>    \n    {/* {webcamRef!=null?<img src={webcamRef.toString()} />:null} */}\n  </div>\n}\n\nexport default Camera;","import React, { useState } from 'react';\n\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\"\nimport NoCamera from \"./no-camera\";\nimport Camera from \"./camera\"\n\nfunction Main() {  \n\n  const [camOn, setCam] = useState<boolean>(false);\n\n  const setRadioValue = (e: boolean) => {\n    setCam(e);\n  }\n\n  return <div>\n    {camOn ? <Camera/> : <NoCamera/>}\n    <ButtonGroup toggle>\n      <ToggleButton\n        key={\"0\"}\n        type=\"radio\"\n        variant=\"secondary\"\n        name=\"radio\"\n        value={\"ON\"}\n        checked={camOn}\n        onClick={(e) => setRadioValue(true)}\n      >オン\n        </ToggleButton>\n      <ToggleButton\n        key={\"1\"}\n        type=\"radio\"\n        variant=\"secondary\"\n        name=\"radio\"\n        value={\"OFF\"}\n        checked={!camOn}\n        onClick={(e) => setRadioValue(false)}\n      >オフ\n        </ToggleButton>\n    </ButtonGroup>\n    \n  </div>\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport HalfLayout from \"./layouts/half\"\nimport MainComponent from \"./comnponents/main\"\n\nfunction App() {\n  return <HalfLayout leftColumn={<div />} rightColumn={<MainComponent/>} />  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}